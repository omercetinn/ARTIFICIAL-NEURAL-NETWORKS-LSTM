from google.colab import drive
drive.mount('/content/drive')

##library setup
import numpy as np
import pandas as pd
import lightgbm as lgb
import statsmodels.api as sm
import matplotlib.pyplot as plt
import warnings
import seaborn as sns

from sklearn.model_selection import train_test_split,GridSearchCV,cross_val_score,cross_val_predict
from sklearn.metrics import mean_squared_error,r2_score

from scipy import stats
%matplotlib inline
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import Sequential, layers, callbacks
from tensorflow.keras.layers import Dense, LSTM, Dropout, GRU, Bidirectional
from sklearn.preprocessing import MinMaxScaler, StandardScaler

#from sklearn.clu

warnings.filterwarnings('ignore')
pd.set_option('display.width', None)

##read excel file by date
pd.read_excel('/content/drive/MyDrive/Enerji_Tahmin_Verileri/tez_calismasi.xlsx', parse_dates = ['Date'])

##creating a copy file to avoid making changes to the actual data
df=pd.read_excel('/content/drive/MyDrive/Enerji_Tahmin_Verileri/tez_calismasi.xlsx', parse_dates = ['Date']).copy()

#first data views
df.head()

#last 5 data views
df.tail()

df.info() #data all structural information

df.shape #number of columns and rows

df.mean() #gives the average of all variables

df.std() #standard deviation of all data

df.var() #variance of all data

df["EnerjiVerileri"].mean() #gives the average of all energy data

df["EnerjiVerileri"].min()

df["EnerjiVerileri"].max()

df.describe().T #all descriptive statistics

df.isnull().values.any() #Are there any missing observations?

df.dropna().describe().T #descriptive display of all missing data

df["Il"].value_counts().plot.barh().set_title("Enerji Verileri");

## GRAPHICS OF DATA USING THE SEABORN LIBRARY 

sns.catplot(x="PanelCesidi",y="EnerjiVerileri",data=df) # where data is low, energy density is also low

sns.barplot(x = "PanelCesidi", y = "EnerjiVerileri",hue = "InvertorCesidi", data=df)

sns.barplot(x = "PanelCesidi", y = "EnerjiVerileri",hue = "Albedo", data=df)


df.groupby(["PanelCesidi","Albedo"])["EnerjiVerileri"].mean() #There is a difference between the chart values above and the actual values. We can see this in the grouping below
#When you switch to 3D, the library applies changes to see the image better
# when crossed over and graphed

sns.distplot(df.EnerjiVerileri, bins=5, kde = False); #create histogram
#"kde" value represents probability density value

sns.distplot(df.EnerjiVerileri);

sns.distplot(df.EnerjiVerileri, hist= False); #just to see the density graph

sns.kdeplot(df.EnerjiVerileri, shade = True); #density graph filled
#Concerned with the density of energy data

(sns.FacetGrid(df,
               hue="InvertorCesidi",
               height=10,
               xlim=(50000, 250000))
.map(sns.kdeplot, "EnerjiVerileri", shade = True)
.add_legend()
)

sns.catplot(x = "PanelCesidi", y = "EnerjiVerileri",hue = "InvertorCesidi", kind=  "point",data = df); 
#The fact that the data above one is close to each other indicates grouping, and the far data is energy data.
# means it carries distinctive information for
#data being far away shows that different information is carried between "inverterceidi" and "panelcesidi".

sns.boxplot(x=df["EnerjiVerileri"]);

sns.boxplot(x=df["HavaDurumu"]); #Checking for outliers

sns.boxplot(x=df["GuneslenmeSuresi"]);

sns.jointplot(x = "Date", y = "EnerjiVerileri", data = df); #common scatter plot

sns.boxplot(x = "PanelCesidi", y = "EnerjiVerileri",data = df);

sns.boxplot(x = "InvertorCesidi", y = "EnerjiVerileri",data = df);

sns.boxplot(x = "Albedo", y = "EnerjiVerileri",data = df);

sns.boxplot(x = "GuneslenmeSuresi", y = "EnerjiVerileri",data = df);

sns.boxplot(x = "SahaYili", y = "EnerjiVerileri",data = df);

df["SahaYili"].value_counts() #when looking at field year data and comparing with energy data
Due to the low data having high energy data, the field year is the highest 6, all data should be compared by looking at the data density.

sns.boxplot(x = "SahaYili", y = "EnerjiVerileri", hue="PanelCesidi",  data = df);

sns.boxplot(x = "Albedo", y = "EnerjiVerileri", hue="PanelCesidi",  data = df);

sns.scatterplot(x = "Date", y = "EnerjiVerileri", hue = "Albedo", style="PanelCesidi", data=df); #can be helpful in determining the type of panel to be used depending on albedo

sns.scatterplot(x = "Date", y = "EnerjiVerileri",hue="PanelCesidi", size="HavaDurumu", data=df); #can be helpful in determining the type of panel to be used depending on albedo

sns.lmplot(x="EnerjiVerileri",y="HavaDurumu",data=df); #Linear increase of weather is observed with the increase of energy data

sns.lmplot(x = "GuneslenmeSuresi",y = "EnerjiVerileri", hue="PanelCesidi",data = df); #With the increase of energy data, linear increase in sunshine time is observed

sns.lmplot(x = "HavaDurumu",y = "EnerjiVerileri", hue="PanelCesidi",data = df); # By adding the categorical variable of weather and panel type with the increase of energy data
# linear increase observed

sns.lmplot(x = "HavaDurumu",y = "EnerjiVerileri", hue="InvertorCesidi",data = df); # Linear increase in sunshine duration is observed with the increase of energy data

sns.lmplot(x = "HavaDurumu",y = "EnerjiVerileri", hue = "InvertorCesidi", col = "PanelCesidi", data = df); # With the increase of energy data
# linear increase is observed depending on weather, panel type and inverter type

sns.lmplot(x = "GuneslenmeSuresi",y = "EnerjiVerileri", hue = "InvertorCesidi", col = "PanelCesidi", data = df);
# With the increase of energy data # linear increase is observed depending on weather, panel type and inverter types

sns.lmplot(x = "HavaDurumu",y = "EnerjiVerileri", hue = "Albedo", col = "PanelCesidi", data = df);

sns.pairplot(df, markers=["o","s","D"]); #all graphics

sns.pairplot(df, kind="reg");

sns.jointplot(x="HavaDurumu",y="EnerjiVerileri", data=df, kind="reg");

sns.jointplot(x="GuneslenmeSuresi",y="EnerjiVerileri", data=df, kind="reg");

sns.lineplot(x="GuneslenmeSuresi",y="EnerjiVerileri",hue="PanelCesidi",data=df); # comparison of sunbathing times with energy data panel type
# output as line chart

sns.lineplot(x="GuneslenmeSuresi",y="EnerjiVerileri",hue="Albedo",data=df); # comparison of sunbathing time with albedo

sns.lineplot(x="GuneslenmeSuresi",
             y="EnerjiVerileri",
             hue="Albedo",
             style="PanelCesidi",
             markers=True, dashes=False, data=df); # comparison of sunshine duration, panel type and albedo
             
dategroup=df.groupby('Date').mean()
plt.figure(figsize=(12,5))
dategroup['EnerjiVerileri'].plot(x=df.Date)
plt.title('Average Energy') # timed evaluation

sns.lineplot(x="GuneslenmeSuresi",
             y="EnerjiVerileri",
             hue="Albedo",
             style="PanelCesidi",
             markers=True, dashes=False, data=df); 
             
## GROUPING PROCESS           

df.groupby("Il")

df.groupby("PanelCesidi")["EnerjiVerileri"].mean()

df.groupby("PanelCesidi")["EnerjiVerileri"].describe()

df.groupby("InvertorCesidi")["EnerjiVerileri"].describe()

df.groupby("Albedo")["EnerjiVerileri"].describe()

df.groupby("Il")["EnerjiVerileri"].describe() # we are grouping first "il" is categorical variable, energy data is numerical variable

df.groupby("PanelCesidi").aggregate(["min",np.median,max])

df.groupby("Il").aggregate({"EnerjiVerileri":"min","HavaDurumu":"min","Date":"min"})

df.groupby(["PanelCesidi","InvertorCesidi"])[["EnerjiVerileri"]].aggregate("mean").unstack()

df.pivot_table("EnerjiVerileri",index="PanelCesidi",columns="InvertorCesidi") # grouping two different variables using pivottable

Albedo=pd.cut(df["Albedo"],[0.15,0.20,0.80]) # Comparing data by classification
Albedo.head(10)

df.pivot_table("EnerjiVerileri",["InvertorCesidi",Albedo],"PanelCesidi") # Comparing data by classification continued

c=df.groupby("PanelCesidi")["EnerjiVerileri"].mean()

X=df.drop(["EnerjiVerileri"],axis=1)
y=df["EnerjiVerileri"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)

df["EnerjiVerileri"].describe([0.01,0.2,0.5,0.75,0.9,0.95,0.99,1])

import seaborn as sns
sns.boxplot(df["EnerjiVerileri"])

#df['month'] = df.date.dt.month
#df['week_of_year'] = df.date.dt.weekofyear
import datetime as dt

## CLASSIFICATION

#dataset.groupby(['Il','Date','PanelCesidi'])
def cat_summary_with_target(dataframe,target,cat_threshold=10):
  temp_cols=[col for col in dataframe.columns if col != 'Date']
  cat_columns= [col for col in temp_cols if (dataframe[col].nunique()<cat_threshold and dataframe[col].dtypes in [int,float]) or (dataframe[col].dtypes=='O')]
  for col in cat_columns:
    print(dataframe.groupby([col]).agg({target:['mean','median','count']}))
    
df.loc[(df['InvertorGucu']==30) | (df['InvertorGucu']==50),'InvertorGucu']=50

df.loc[(df['InvertorGucu']==60) | (df['InvertorGucu']==265) | (df['InvertorGucu']==276) ,'InvertorGucu']=265

df.loc[(df['PanelGucu']==117.5) | (df['PanelGucu']==270) | (df['PanelGucu']==320) | (df['PanelGucu']==265),'PanelGucu']=270

df.loc[(df['PanelCesidi']==1) | (df['PanelCesidi']==3),'PanelCesidi']=1

df.loc[(df['SahaYili']==5) | (df['SahaYili']==6),'SahaYili']=5

df.loc[(df['SahaYili']==2) | (df['SahaYili']==3),'SahaYili']=2

cat_summary_with_target(df,'EnerjiVerileri')

df.describe().T

df.hist(figsize=(10,10)); # See data distributions after classification

# Check for missing values
df = df.loc[:,['Date','EnerjiVerileri']]

print('Total num of missing values:') 
print(df.EnerjiVerileri.isna().sum())
print('')

# Locate the missing value
df_missing_date = df.loc[df.EnerjiVerileri.isna() == True]
print('The date of missing value:')
print(df_missing_date.loc[:,['Date']])

# Replcase missing value with interpolation
df.EnerjiVerileri.interpolate(inplace = True)

df = df.drop('Date', axis = 1)
# Split train data and test data
train_size = int(len(df)*0.8)

# train_data = df.WC.loc[:train_size] -----> it gives a series
# Do not forget use iloc to select a number of rows
train_data = df.iloc[:train_size]
test_data = df.iloc[train_size:]
# Scale data
# The input to scaler.fit -> array-like, sparse matrix, dataframe of shape (n_samples, n_features)
scaler = MinMaxScaler().fit(train_data)

train_scaled = scaler.transform(train_data)
test_scaled = scaler.transform(test_data)

# Create input dataset
# Th input shape should be [samples, time steps, features]
def create_dataset (X, look_back = 1):
    Xs, ys = [], []
    
    for i in range(len(X)-look_back):
        v = X[i:i+look_back]
        Xs.append(v)
        ys.append(X[i+look_back])
        
    return np.array(Xs), np.array(ys)

X_train, y_train = create_dataset(train_scaled,30)
X_test, y_test = create_dataset(test_scaled,30)

print('X_train.shape: ', X_train.shape)
print('y_train.shape: ', y_train.shape)
print('X_test.shape: ', X_test.shape) 
print('y_test.shape: ', y_test.shape)

DATA ANALIST WITH LSTM AND GRU

# Create GRU model
def create_gru(units):
    model = Sequential()
    # Input layer 
    model.add(GRU (units = units, return_sequences = True, 
                 input_shape = [X_train.shape[1], X_train.shape[2]]))
    model.add(Dropout(0.2)) 
    # Hidden layer
    model.add(GRU(units = units))                 
    model.add(Dropout(0.2))
    model.add(Dense(units = 1)) 
    #Compile model
    model.compile(optimizer='adam',loss='mse')
   
    return model
model_gru = create_gru(64)

# Create BiLSTM model
def create_bilstm(units):
    model = Sequential()
    # Input layer
    model.add(Bidirectional(LSTM(units = units, return_sequences=True), 
                            input_shape=(X_train.shape[1], X_train.shape[2])))
    # Hidden layer
    model.add(Bidirectional(LSTM(units = units)))
    model.add(Dense(1))
    #Compile model
    model.compile(optimizer='adam',loss='mse')
    return model

model_bilstm = create_bilstm(64)

def fit_model(model):
    early_stop = keras.callbacks.EarlyStopping(monitor = 'val_loss',
                                               patience = 10)
    history = model.fit(X_train, y_train, epochs = 50, validation_split = 0.2,
                    batch_size = 16, shuffle = False, callbacks = [early_stop])
    return history

history_gru = fit_model(model_gru)
history_bilstm = fit_model(model_bilstm)

# Plot train loss and validation loss
def plot_loss (history, model_name):
    plt.figure(figsize = (10, 6))
    plt.plot(history.history['loss'])
    plt.plot(history.history['val_loss'])
    plt.title('Model Train vs Validation Loss for ' + model_name)
    plt.ylabel('Loss')
    plt.xlabel('epoch')
    plt.legend(['Train loss', 'Validation loss'], loc='upper right')

plot_loss (history_gru, 'GRU')
plot_loss (history_bilstm, 'Bidirectional LSTM')

# Transform data back to original data space
y_test = scaler.inverse_transform(y_test)
y_train = scaler.inverse_transform(y_train)

# Make prediction
def prediction(model):
    prediction = model.predict(X_test)
    prediction = scaler.inverse_transform(prediction)
    return prediction

prediction_gru = prediction(model_gru)
prediction_bilstm = prediction(model_bilstm)

# Plot test data vs prediction
def plot_future(prediction, model_name, y_test):
    
    plt.figure(figsize=(10, 6))
    
    range_future = len(prediction)

    plt.plot(np.arange(range_future), np.array(y_test), label='Test data')
    plt.plot(np.arange(range_future), np.array(prediction),label='Prediction')

    plt.title('Test data vs prediction for ' + model_name)
    plt.legend(loc='upper left')
    plt.xlabel('Zaman')
    plt.ylabel('Enerji Verileri')
       
plot_future(prediction_gru, 'GRU', y_test)
plot_future(prediction_bilstm, 'Bidirectional LSTM', y_test)

# Calculate MAE and RMSE
def evaluate_prediction(predictions, actual, model_name):
    errors = predictions - actual
    mse = np.square(errors).mean()
    rmse = np.sqrt(mse)
    mae = np.abs(errors).mean()

    print(model_name + ':')
    print('Mean Absolute Error: {:.4f}'.format(mae))
    print('Root Mean Square Error: {:.4f}'.format(rmse))
    print('')

evaluate_prediction(prediction_gru, y_test, 'GRU')
evaluate_prediction(prediction_bilstm, y_test, 'Bidirectiona LSTM')

df.dtypes

temp_cols=[col for col in df.columns if col !='Date']

cat_cols=[col for col in temp_cols if (df[col].nunique()<10 and df[col].dtypes in [int,float]) or (df[col].dtypes=='O')]

print(df.groupby(['InvertorGucu']).agg({'EnerjiVerileri':'mean'}))

df[cat_cols].dtypes

df.loc[(df['InvertorGucu']==30) | (df['InvertorGucu']==50),'InvertorGucu']=1

sns.histplot(df['GuneslenmeSuresi'],bins=15)

np.random.seed(115)

df.corr() #Relationship with the value evaluation of the data

## Stats Model Setup

X= df[["HavaDurumu"]]
X[0:5]

y=df["EnerjiVerileri"]
y[0:5]
